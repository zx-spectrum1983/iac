---

  - name: Start role
    debug:
      msg: "########### INSTALL GITLAB AND GITLAB-RUNNER IN DOCKER ###########"

  - name: Gitlab - Create gitlab project dir
    file:
      path: "{{project_dir}}/gitlab"
      state: directory

  - name: Gitlab - Copy docker-compose.yml to project
    template:
      src: "docker-compose.yml"
      dest: "{{project_dir}}/gitlab/"

#  - name: Gitlab - check deploy
#    stat:
#      path: /home/ansible/gitlab_token
#    register: gitlab_status

  - set_fact:
      gitlab_deploy_status: true
    when: gitlab_token is undefined




  - name: Gitlab - deploy if not exist
    block:

    - name: Gitlab deploy - Up project (may take a long time)
      shell: cd {{project_dir}}/gitlab && docker-compose up -d
      register: output
      become: yes

    - debug:
        var: output.stderr_lines

    - name: Gitlab deploy - Wait for building project (take few minutes...)
      uri:
        url: "http://{{ansible_default_ipv4.address}}:8000"
        method: GET
        status_code: 200
      register: _result
      until: _result.status == 200
      retries: 60
      delay: 10

    - name: Gitlab deploy - Get root password
      shell: sudo cat {{project_dir}}/gitlab/etc/gitlab/initial_root_password | grep "Password:" | awk '{print $2}'
      register: gitlab_root_pass

#    - local_action: copy content={{ gitlab_root_pass.stdout }} dest="/home/ansible/gitlab_root_password"
    - name: Gitlab deploy - save root password to vault
      include_role:
        name: 90-sync-vault
      vars:
        vault_argument: "append"
        vault_key: "gitlab_root_password"
        vault_value: "{{gitlab_root_pass.stdout}}"

    - name: Gitlab deploy - Generate access token
      shell: openssl rand -hex 20
      register: gitlab_token

#    - local_action: copy content={{ gitlab_token.stdout }} dest="/home/ansible/gitlab_token"
    - name: Gitlab deploy - save token to vault
      include_role:
        name: 90-sync-vault
      vars:
        vault_argument: "append"
        vault_key: "gitlab_token"
        vault_value: "{{gitlab_token.stdout}}"

    - name: Gitlab deploy - Create new gitlab user (waiting...)
      shell: |
        sudo docker exec -i gitlab-ce bash -c "gitlab-rails runner \"u = User.new(username: '{{gitlab_username}}', email: '{{gitlab_email}}', name: '{{gitlab_username}}', password: '{{gitlab_password}}', password_confirmation: '{{gitlab_password}}'); u.skip_confirmation! ; u.save! \""

    - name: Gitlab deploy - Create token (waiting...)
      shell: |
        sudo docker exec -i gitlab-ce bash -c "gitlab-rails runner \"token = User.find_by_username('{{gitlab_username}}').personal_access_tokens.create(scopes: [:read_user, :api, :read_api, :sudo], name: 'ansible-token'); token.set_token('{{gitlab_token.stdout}}'); token.save! \""

    - name: Gitlab deploy - Get runner token (waiting...)
      shell: |
        sudo docker exec -i gitlab-ce bash -c "gitlab-rails runner 'puts Gitlab::CurrentSettings.current_application_settings.runners_registration_token'"
      register: gitlab_runner_token

    - name: Gitlab deploy - download gitlab-runner
      get_url:
        url: https://gitlab-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-runner-linux-amd64
        dest: /usr/local/bin/gitlab-runner
        mode: '0555'
      become: yes

    - name: Gitlab deploy - create user gitlab-runner
      user:
        name: gitlab-runner
        groups:
         - "{{ansible_user_id}}"
         - sudo
        state: present
        shell: /bin/bash
        createhome: yes
        home: /home/gitlab-runner
        skeleton: false
      become: yes

    - name: Gitlab deploy - create .ssh dir for user gitlab-runner
      file:
        path: "/home/gitlab-runner/.ssh"
        state: directory
        owner: gitlab-runner
        group: gitlab-runner
        mode: '0700'
      become: yes

    - name: Gitlab deploy - copy ssh keys to user gitlab-runner
      copy:
        src: "/home/{{ansible_user_id}}/.ssh/{{item.fn}}"
        dest: "/home/gitlab-runner/.ssh/{{item.fn}}"
        owner: gitlab-runner
        group: gitlab-runner
        mode: '{{item.md}}'
      loop:
        - { fn: 'id_rsa', md: '0600' }
        - { fn: 'id_rsa.pub', md: '0644' }
      become: yes

    - name: Gitlab deploy - install gitlab-runner
      shell: |
        sudo gitlab-runner install --user=gitlab-runner --working-directory=/home/gitlab-runner


####        sudo gitlab-runner start

    - name: Gitlab deploy - register gitlab-runner
      shell: |
        sudo gitlab-runner register --non-interactive --url http://{{ansible_default_ipv4.address}}:8000/ --registration-token "{{gitlab_runner_token.stdout}}" --executor shell --tag-list iac-runner --run-untagged=true
        sudo gitlab-runner start
        sudo gitlab-runner verify
      register: output

    - debug: var=output

    - name: Gitlab deploy - switch git repo to local server
      shell: |
        git remote rename origin init
        git remote add origin http://ansible-token:{{gitlab_token.stdout}}@{{ansible_default_ipv4.address}}:8000/ansible/iac.git
        git push origin

    #when: not gitlab_status.stat.exists
    when: gitlab_deploy_status








